"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[676],{5676:(e,t,n)=>{n.d(t,{NM:()=>i,iH:()=>u,yZ:()=>l});var o=n(8822),s=n(1200),r=n(1155),a=n(7104);class i{async createSavingsGroup(e,t){try{var n;if(0===e.participants.length)throw Error("At least one participant is required");let o=e.participants.map(e=>e.position),s=new Set(o);if(o.length!==s.size)throw Error("Duplicate positions detected");let i=e.participants.length;for(let t of e.participants)if(t.position<1||t.position>i)throw Error("Position must be between 1 and ".concat(i));if(0===e.multisigConfig.signers.length)throw Error("At least one multisig signer is required");if(e.multisigConfig.threshold<=0||e.multisigConfig.threshold>e.multisigConfig.signers.length)throw Error("Invalid multisig threshold");let c=new r.Z,l=e.participants.map(e=>a.h.fromSecretKey(e.wallet).getPublicKey().toSuiAddress()),u=e.participants.map(e=>e.position);console.log("Participant wallets:",l),console.log("Participant positions:",u),console.log("Multisig signers:",e.multisigConfig.signers),console.log("Multisig threshold:",e.multisigConfig.threshold),c.moveCall({target:"".concat(this.packageId,"::codeforge::create_savings_group"),arguments:[c.pure.string(e.name),c.pure.u64(e.cycleDurationDays),c.pure.u64(e.startCycle),c.pure.u64(e.contributionAmount),c.pure.vector("address",l),c.pure.vector("u8",u),c.pure.vector("address",e.multisigConfig.signers),c.pure.u64(e.multisigConfig.threshold),c.object("0x0000000000000000000000000000000000000000000000000000000000000006")]}),c.setGasBudget(1e7);let g=await this.client.signAndExecuteTransaction({signer:t,transaction:c,options:{showEvents:!0,showEffects:!0,showObjectChanges:!0},requestType:"WaitForLocalExecution"});if(console.log("Transaction result:",g),g.objectChanges){let e=g.objectChanges.find(e=>{var t;return"created"===e.type&&(null==(t=e.objectType)?void 0:t.includes("SavingsGroup"))});if(e&&"objectId"in e)return{groupId:e.objectId,digest:g.digest}}let d=null==(n=g.events)?void 0:n.find(e=>e.type.includes("GroupCreated"));if(d&&d.parsedJson)return{groupId:d.parsedJson.group_id,digest:g.digest};throw Error("Failed to get group ID from transaction result")}catch(e){if(console.error("Error creating savings group:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}async contribute(e,t,n){try{let o=a.h.fromSecretKey(n),s=new r.Z,[i]=s.splitCoins(s.gas,[s.pure.u64(1e9*t)]);s.moveCall({target:"".concat(this.packageId,"::codeforge::contribute"),arguments:[s.object(e),i,s.object("0x0000000000000000000000000000000000000000000000000000000000000006")]});let c=await this.client.signAndExecuteTransaction({signer:o,transaction:s,options:{showEvents:!0,showEffects:!0}});return console.log("Contribution transaction result:",c),c.digest}catch(e){if(console.error("Error making contribution:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}async startNewCycle(e,t){try{let n=a.h.fromSecretKey(t),o=new r.Z;o.moveCall({target:"".concat(this.packageId,"::codeforge::start_new_cycle"),arguments:[o.object(e),o.object("0x0000000000000000000000000000000000000000000000000000000000000006")]});let s=await this.client.signAndExecuteTransaction({signer:n,transaction:o,options:{showEvents:!0,showEffects:!0}});return console.log("Start new cycle transaction result:",s),s.digest}catch(e){if(console.error("Error starting new cycle:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}async proposePayout(e,t){try{let n=new r.Z;n.moveCall({target:"".concat(this.packageId,"::codeforge::propose_payout"),arguments:[n.object(e),n.object("0x0000000000000000000000000000000000000000000000000000000000000006")]});let o=await this.client.signAndExecuteTransaction({signer:t,transaction:n,options:{showEvents:!0,showEffects:!0}});return console.log("Propose payout transaction result:",o),o.digest}catch(e){if(console.error("Error proposing payout:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}async signPayout(e,t){try{let n=new r.Z;n.moveCall({target:"".concat(this.packageId,"::codeforge::sign_payout"),arguments:[n.object(e)]});let o=await this.client.signAndExecuteTransaction({signer:t,transaction:n,options:{showEvents:!0,showEffects:!0}});return console.log("Sign payout transaction result:",o),o.digest}catch(e){if(console.error("Error signing payout:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}async executePayout(e,t){try{let n=new r.Z;n.moveCall({target:"".concat(this.packageId,"::codeforge::execute_payout"),arguments:[n.object(e)]});let o=await this.client.signAndExecuteTransaction({signer:t,transaction:n,options:{showEvents:!0,showEffects:!0}});return console.log("Execute payout transaction result:",o),o.digest}catch(e){if(console.error("Error executing payout:",e),e instanceof Error&&(e.message.includes("No valid gas coins found")||e.message.includes("insufficient gas")||e.message.includes("Insufficient SUI balance")))throw Error("Insufficient SUI balance for gas fees. Please add SUI to your wallet.");throw e}}constructor(e){this.client=new o.x({url:(0,s.T)(e.network)}),this.packageId=e.packageId}}let c={packageId:"0xc9be599a1ce3605fcccaf86a1cd857d09bdf7f5f2acc39b775d13b1cbff52c35",network:"testnet"};async function l(e,t,n,o,s,r,l,u,g){var d,f;let p=(d=u,f=l,new i({packageId:d||c.packageId,network:f||c.network})),h=function(e,t){console.log(e);let n=e.map(e=>a.h.fromSecretKey(e.wallet).getPublicKey().toSuiAddress()),o=Math.ceil(e.length/2);return{signers:n,threshold:t||o}}(s,g),w=a.h.fromSecretKey(r);return await p.createSavingsGroup({name:e,cycleDurationDays:t,startCycle:n,contributionAmount:1e9*o,participants:s,multisigConfig:h},w)}async function u(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"testnet";try{if(!e||"string"!=typeof e)throw Error("Invalid address provided");let n=["testnet","mainnet","devnet"];if(!n.includes(t))throw Error("Invalid network. Must be one of: ".concat(n.join(", ")));let r=(0,s.T)(t),i=new o.x({url:r}),c=await i.getBalance({owner:a.h.fromSecretKey(e).getPublicKey().toSuiAddress(),coinType:"0x2::sui::SUI"}),l=parseInt(c.totalBalance)/1e9;return{balance:c.totalBalance,balanceInSui:l,coinObjectCount:c.coinObjectCount}}catch(e){throw console.error("Error fetching SUI balance:",e),Error("Failed to fetch balance: ".concat((null==e?void 0:e.message)||"Unknown error"))}}}}]);